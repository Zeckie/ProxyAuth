# GitHub Actions Workflow created for testing in following steps:
# - validate Gradle Wrapper,
# - run test tasks.

name: Build
on:
  # Trigger the workflow on pushes to only the 'main' branch (this avoids duplicate checks being run e.g. for dependabot pull requests)
  push:
    branches: [main]
  # Trigger the workflow on any pull request
  pull_request:

jobs:

  # Run Gradle Wrapper Validation Action to verify the wrapper's checksum
  gradleValidation:
    name: Gradle Wrapper
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2.4.0

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.0.4

  # Build using Java 8 to check Gradle toolchain / version check
  java8:
    name: Check Gradle Java 8
    needs: gradleValidation
    runs-on: ubuntu-latest

    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2.4.0

      # Setup Java 8 environment for the next steps
      - name: Setup Java 8
        uses: actions/setup-java@v2
        with:
          java-version: 8
          distribution: zulu
          cache: gradle

      # Build artefact using build Gradle task
      - name: Build
        run: ./gradlew build

  # Build and test application with build Gradle task and provide the artefact for the next workflow jobs
  build:
    name: Build
    needs: gradleValidation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      name: ${{ steps.properties.outputs.name }}
      changelog: ${{ steps.properties.outputs.changelog }}
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2.4.0

      # Setup Java 16 environment for the next steps
      - name: Setup Java 16
        uses: actions/setup-java@v2
        with:
          java-version: 16
          distribution: zulu
          cache: gradle

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
          NAME="$(echo "$PROPERTIES" | grep "^name:" | cut -f2- -d ' ')"
          CHANGELOG="$(./gradlew getChangelog --unreleased --no-header --console=plain -q)"
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"

          echo "::set-output name=version::$VERSION"
          echo "::set-output name=name::$NAME"
          echo "::set-output name=changelog::$CHANGELOG"

      # Build artefact using build Gradle task
      - name: Build
        run: ./gradlew build

      # Store built jar as an artefact for downloading
      - name: Upload build artefacts
        uses: actions/upload-artifact@v2.2.4
        with:
          name: "${{ steps.properties.outputs.name }} - ${{ steps.properties.outputs.version }}"
          path: ./build/libs/*

      # Store test reports as an artefact
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v2.2.4
        with:
          name: "test-reports"
          path: ./build/reports/*
          retention-days: 7

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release Draft
    if: github.event_name != 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v2.4.0

      # Remove old release drafts by using the curl request for the available releases with draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create new release draft - which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/create-release@v1.1.4
        with:
          tag_name: ${{ needs.build.outputs.version }}
          release_name: v${{ needs.build.outputs.version }}
          body: ${{ needs.build.outputs.changelog }}
          draft: true
      - name: Download Artefact
        uses: actions/download-artifact@v2.1.0
        with:
          name: "${{ needs.build.outputs.name }} - ${{ needs.build.outputs.version }}"
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "${{ needs.build.outputs.name }}-${{ needs.build.outputs.version }}.jar"
          asset_name: "${{ needs.build.outputs.name }}-${{ needs.build.outputs.version }}.jar"
          asset_content_type: application/java-archive
